# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      SQL_SERVER: "kafkaeunnprodsqlserver0001.database.windows.net"
      SQL_DATABASE: "kafkaeunnprodsqldb0001"
      SQL_USER: "kafkaadmin01"
      SQL_PASSWORD: ${{ secrets.DB_PASSWORD }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Install http (HTTPie)
        run: |
          sudo apt-get update
          sudo apt-get install -y httpie
          http --version
          start_date=$(date -d "$(date '+%Y-%m-01')" '+%Y-%m-%d')

          # Current month's end date
          end_date=$(date -d "$(date -d "$(date '+%Y-%m-01') +1 month" '+%Y-%m-01') -1 day" '+%Y-%m-%d')
          
          # Displaying the results
          echo "Start date: $start_date"
          echo "End date: $end_date"

          yesterday=$(date -d 'yesterday' '+%Y-%m-%d')
          
          # Today's date
          today=$(date '+%Y-%m-%d')
          
          # Displaying the results
          echo "Yesterday's date: $yesterday"
          echo "Today's date: $today"
          pwd
          ls -lR


      - name: Install Confluent Cloud CLI
        run: |
          sudo curl -sL --http1.1 https://cnfl.io/cli | sh -s -- latest
          pwd
          ls -latr ./bin
          echo $PATH
          export PATH=$PATH:`pwd`/bin
          echo $PATH

      - name: Verify Installations
        run: |
          echo $PATH
          export PATH=$PATH:`pwd`/bin
          http --version
          confluent version
          # http 'https://api.telemetry.confluent.cloud/v2/metrics/cloud/query' --auth ${{ secrets.CC_KEY_FINOPS }} < received_bytes_query.json | jq -r  '.data[] |  [.timestamp , .value] | @csv'
          http 'https://api.telemetry.confluent.cloud/v2/metrics/cloud/query' --auth ${{ secrets.CC_KEY_FINOPS }} < received_bytes_query.json | jq -r  '.data[] |  [.timestamp , ."metric.topic" ,  .value] | @csv'
  
      - name: Log in to Confluent Cloud
        run: |
          export PATH=$PATH:`pwd`/bin
          confluent login --save
          confluent billing cost list --start-date 2023-11-12 --end-date 2023-11-13 | grep -v "^-" |  sed 's/|/,/g' | tr -s ' ' | tr -d ' ' | sed 's/\$//g' 
          confluent billing cost list --start-date 2023-11-12 --end-date 2023-11-13 | grep -v "^-" |  sed 's/|/,/g' | tr -s ' ' | tr -d ' ' | sed 's/\$//g'  | tail -n +2 > daily_billing.csv
        env:
          CONFLUENT_CLOUD_EMAIL: ${{ secrets.CONFLUENT_CLOUD_EMAIL }}
          CONFLUENT_CLOUD_PASSWORD: ${{ secrets.CONFLUENT_CLOUD_PASSWORD }}        
      - name: Install dependencies
        run: |
          export PATH=$PATH:`pwd`/bin
          #python -m pip install --upgrade pip
          #pip install mssql-cli
          ls -l /opt
          ls -lR /opt/mssql-tools/bin
          /opt/mssql-tools/bin/sqlcmd -S $SQL_SERVER -U $SQL_USER -P $SQL_PASSWORD  -q "SELECT @@VERSION"
          #mssql-cli -S $SQL_SERVER -d $SQL_DATABASE -U $SQL_USER -P $SQL_PASSWORD 

      - name: Connect to Azure SQL Database
        run: |
          #mssql-cli -S $SQL_SERVER -d $SQL_DATABASE -U $SQL_USER -P $SQL_PASSWORD  
          /opt/mssql-tools/bin/sqlcmd -S $SQL_SERVER -U $SQL_USER -P $SQL_PASSWORD  -q "SELECT @@VERSION"
          http 'https://api.telemetry.confluent.cloud/v2/metrics/cloud/query' --auth ${{ secrets.CC_KEY_FINOPS }} < received_bytes_query.json | jq -r  '.data[] |  [.timestamp , ."metric.topic" ,  .value] | @csv' > received_bytes_query.csv
          ls -al
          date -d -1d -format '%Y-%m-%dT00:00:00-05:00/%Y-%m-%dT23:59:59'
          cat daily_billing.csv
          #bcp kafkaeunnprodsqldb0001.dbo.daily_trans_topics_data in received_bytes_query.csv  -S $SQL_SERVER -U $SQL_USER -P $SQL_PASSWORD -q -c -t ","
          #bcp kafkaeunnprodsqldb0001.dbo.daily_base in daily_billing.csv  -S  $SQL_SERVER -U $SQL_USER -P $SQL_PASSWORD  -q -c -t ","

